{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "60d467e6-1563-4c81-a586-e06144308693",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     4\n",
       "1     8\n",
       "2    15\n",
       "3    16\n",
       "4    23\n",
       "5    42\n",
       "dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Q1. Create a Pandas Series that contains the following data: 4, 8, 15, 16, 23, and 42. Then, print the series.\n",
    "\n",
    "import pandas as pd \n",
    "\n",
    "data=[4,8,15,16,23,42]\n",
    "type(data)\n",
    "\n",
    "# to conver list to series\n",
    "df=pd.Series(data)\n",
    "type(df)\n",
    "df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "61f9ebea-577f-4f07-bb4f-82a19cb9e37b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    sous\n",
       "1       4\n",
       "2       3\n",
       "3     3.3\n",
       "4       5\n",
       "5       6\n",
       "6       6\n",
       "7       7\n",
       "8      10\n",
       "dtype: object"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Q2. Create a variable of list type containing 10 elements in it, and apply pandas.Series function on the variable print it.\n",
    "\n",
    "\n",
    "data1=[\"sous\",4,3,3.3,5,6,6,7,10]\n",
    "\n",
    "type(data1)\n",
    "len(data1)\n",
    "\n",
    "pd.Series(data1)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "808521f2-bf1d-431e-9ef1-8b606fc0f0af",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alice</td>\n",
       "      <td>25</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Bob</td>\n",
       "      <td>30</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Claire</td>\n",
       "      <td>27</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Name  Age  Gender\n",
       "0   Alice   25  Female\n",
       "1     Bob   30    male\n",
       "2  Claire   27  Female"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Q3. Create a Pandas DataFrame that contains the following data:\n",
    "# Name\n",
    "# Alice\n",
    "# Bob\n",
    "# Claire\n",
    "\n",
    "# Age\n",
    "# 25\n",
    "# 30\n",
    "# 27\n",
    "\n",
    "# Gender\n",
    "# Female\n",
    "# Male\n",
    "# Female\n",
    "\n",
    "import pandas as pd \n",
    "\n",
    "data3=[[\"Alice\",25,\"Female\"],[\"Bob\",30,\"male\"],[\"Claire\",27,\"Female\"]]\n",
    "df3=pd.DataFrame(data3,columns=[\"Name\",\"Age\",\"Gender\"])\n",
    "df3\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "74b3de54-da8b-4f0e-b30f-97ec67dee411",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.series.Series"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Q4. What is ‘DataFrame’ in pandas and how is it different from pandas.series? Explain with an example.\n",
    "\n",
    "# DataFrame is the collection of multiple columns and multiple rows, in such way so we can easly modify and manupalte it.\n",
    "# Where as pandas.series is collection is single row and single colums \n",
    "# the difference between pandas.DataFrame and pandas.series is DataFrames are designed for handling structured, tabular data with multiple variables, while Series are more suited for representing and manipulating single columns of data.\n",
    "\n",
    "# For isntance \n",
    "\n",
    "df3\n",
    "\n",
    "#  here df3 is pandas.DataFrame and if we select one column for it it will be a pandas.serious\n",
    "\n",
    "df3.columns\n",
    "type(df3[\"Name\"])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "2fb4a84c-13b3-4734-8d83-20a88b4c5d04",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alice</td>\n",
       "      <td>25</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Bob</td>\n",
       "      <td>30</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Claire</td>\n",
       "      <td>27</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Name  Age  Gender\n",
       "0   Alice   25  Female\n",
       "1     Bob   30    male\n",
       "2  Claire   27  Female"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Q5. What are some common functions you can use to manipulate data in a Pandas DataFrame? Can\n",
    "# you give an example of when you might use one of these functions?\n",
    "\n",
    "import pandas as pd \n",
    "\n",
    "data3=[[\"Alice\",25,\"Female\"],[\"Bob\",30,\"male\"],[\"Claire\",27,\"Female\"]]\n",
    "df3=pd.DataFrame(data3,columns=[\"Name\",\"Age\",\"Gender\"])\n",
    "df3\n",
    "# in pandas DataFrame we have verious function to perform verious funtionalties, here be have some example \n",
    "\n",
    "df3\n",
    "\n",
    "# describe() : is use to descibe about the data sets\n",
    "\n",
    "df3.describe()\n",
    "\n",
    "#set_index(): is use to set index but not the permanent , for saving it as we have to use ipnlace=true\n",
    "\n",
    "\n",
    "df3.set_index(\"Name\")\n",
    "df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "80371aa6-f54a-4e00-beed-86f8da72cb85",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Q6. Which of the following is mutable in nature Series, DataFrame, Panel?\n",
    "\n",
    "#In the context of pandas, Series and DataFrame are mutable, meaning you can modify their contents after creation. However, Panel objects are considered deprecated in pandas, and it's recommended to use MultiIndex DataFrame or xarray for similar functionality.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "14bfc405-7011-4ad7-b3bb-4e8a1124d73b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Column1 Column2\n",
      "0        1       a\n",
      "1        2       b\n",
      "2        3       c\n",
      "3        4       d\n"
     ]
    }
   ],
   "source": [
    "# Q7. Create a DataFrame using multiple Series. Explain with an example.\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "# Creating multiple Series\n",
    "s1 = pd.Series([1, 2, 3, 4], name='A')\n",
    "s2 = pd.Series(['a', 'b', 'c', 'd'], name='B')\n",
    "\n",
    "# Creating a DataFrame using the Series\n",
    "df = pd.DataFrame({'Column1': s1, 'Column2': s2})\n",
    "\n",
    "print(df)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
